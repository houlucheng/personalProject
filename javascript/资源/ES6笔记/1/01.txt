let和const命令   
前提补充：块级作用域   
任何一对花括号中的语句集都属于一个块，在这之中定义的所
有变量在代码块外都是不可见的，我们称之为块级作用域。
 

ES6的到来，为我们提供了块级作用域。且块级作用域并不影
响var声明的变量

let命令
   

ES6新增了let命令，用来声明变量。它的用法类似于var，但
是所声明的变量，只在let命令所在的代码块内有效
    

const 命令    

const声明一个只读的常量。一旦声明，常量的值就不能改变
    




const声明的变量不得改变值，这意味着，const一旦声明变量，
就必须立即初始化，不能留到以后赋值

   区别：箭头函数内部的this是词法作用域，
   由上下文确定.箭头函数完全修复了this的指向，this总是指向词
   法作用域，也就是外层调用者obj：

不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。
   1数组的解构赋值
   2对象的解构赋值
   3.字符串的解构赋值
   4.函数参数的解构赋值

   字符串新增方法
   1.includes()：返回布尔值，表示是否找到了参数字符串。
   2.startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。
   3.endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。
 4. repeat()
  repeat方法返回一个新字符串，表示将原字符串重复n次

  二.数组的扩展
Array.of方法用于将一组值，转换为数组。
Array方法没有参数、一个参数、三个参数时，
返回结果都不一样。只有当参数个数不少于2个时，Array()才
会返回由参数组成的新数组。参数个数只有一个时，实际上
是指定数组的长度。
Array.of基本上可以用来替代Array()或new Array()，并且不存
在由于参数不同而导致的重载。它的行为非常统一


  3.数组实例的copyWithin()
  数组实例的copyWithin方法，在当前数组内部，将指定位置的
  成员复制到其他位置（会覆盖原有成员），然后返回当前数组。
  也就是说，使用这个方法，会修改当前数组。

  Array.prototype.copyWithin(target, start = 0, end = this.length)
它接受三个参数。
target（必需）：从该位置开始替换数据。
start（可选）：从该位置开始读取数据，默认为0。如果为负值，
表示倒数。
end（可选）：到该位置前停止读取数据，默认等于数组长度。
如果为负值，表示倒数。这三个参数都应该是数值，如果不是，
会自动转为数值。
