闭包：
闭包就是两个函数的嵌套 内层函数调用外层的变量，外层函数将内层return出去/闭包可以保存变量，
使其不被污染，实现很多效果/但是不能多次使用，因为外部变量一直存在于内存中，无法回收，容易
出现内存泄漏。

内存泄漏的危害：内存泄漏指申请的内存一直被占用，无法释放，对运行时间短的影响不大，对于时
间长的，运行会变慢，影响流畅度和效果。

  内存泄漏（存储渗漏）是用动态存储分配函数动态开辟的空间，在使用完毕后未释放，结果导致一直占
据该内存单元，直到程序结束。内存泄漏是一种很难定位和跟踪的错误。发生内存泄漏的代码只有在某
些特定环境或操作过程下才会发生。 
内存泄漏可以分为4类： 

1. 常发性内存泄漏。发生内存泄漏的代码会被多次执行到，每次被执行的时候都会导致一块内存泄漏。 
2. 偶发性内存泄漏。发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发
性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存
泄漏至关重要。 
3. 一次性内存泄漏。发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块
仅且一块内存发生泄漏。比如，在类的构造函数中分配内存，在析构函数中却没有释放该内存，所以内
存泄漏只会发生一次。 
4. 隐式内存泄漏。程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这
里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几
天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄
漏为隐式内存泄漏。 

从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄
漏的存在。真正有危害的是内存泄漏的堆积，这会最终消耗尽系统所有的内存。从这个角度来说，一次
性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和
偶发性内存泄漏它更难被检测到。



