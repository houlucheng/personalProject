状态机：React 把组件看成一个状态机。通过用户的交互，实现不同的状态然后渲染UI，让用户界面
和数据保持一致

内存泄漏的危害：内存泄漏指申请的内存一直被占用，无法释放，对运行时间短的影响不大，对于时
间长的，运行会变慢，影响流畅度和效果。

闭包：
闭包就是两个函数的嵌套 内层函数调用外层的变量，外层函数将内层return出去/闭包可以保存变量，
使其不被污染，实现很多效果/但是不能多次使用，因为外部变量一直存在于内存中，无法回收，容易
出现内存泄漏。

同源策略：同源指的是：协议，域名，端口都相同/目的是为了保证用户信息安全，防止恶意的网站窃
取数据/提交表单 不受同源策略的限制。


reducer（瑞达瑟）：reducer是一个函数，它接受一个state和一个action（安科神），根据action的
type（太婆）返回一个新的state。根据业务逻辑可以分为很多个reducer，然后通过combineReducers
（康姆 伴音 瑞达瑟思）将它们合并，state树中有很多对象，每个state对象对应一个reducer，state
对象的名字可以在合并时定义

可控表单就是react可以控制它的value值，页面渲染后的value不变，用户输入也不变。
不可控表单就是表单元素的value由用户决定，用defaultvalue给元素设置默认值。（地方特）。
可控的好处是：符合React的数据流，数据存在state中便于使用，便于对数据的处理。

react：起源于Facebook/特点是：上手容易，学习简单，代码容易，易阅读。自动的DOM操作。/核心是
组件，目的是提高代码的复用率，降低代码和测试的复杂度。

不完全解构：左边的模式只匹配一部分右边的数组

json的优势：轻量级，体积小，节省流量，
提高加载速度解析成原生JS对象，解析比XML更快
查找数据无需查找标签，更快
JSON（JavaScript Object Notation）轻量级数据格式 

GET：更常用，没有POST安全，传输数据大小有限制。
POST：使用相对较少，性能只有GET的1/3左右，比GET稍微安全一点，没有传输数据大小限制。

jsonp跨域jsonp就是利用script标签的跨域能力请求资源（思科瑞破特）
把json的url赋给script的src属性，把这个script插入到dom里，让浏览器去获取最终获得一个类似
这样的数据：callback({"name":"Jack","from":"加勒比海"})（扣百克特）
callback是页面存在的回调方法，参数就是想得到的json回调方法要遵从服务端的约定一般是用
callback 或者 cb

Ajax是一种无须重新加载整个页面的情况下，更新局部页面的技术
Ajax优点：异步加载数据，无需切换页面，更佳的用户体验：局部刷新、及时验证、操作步骤简化等，
节省流量，JS控制数据的加载，更加灵活多用。

open(method, url, asyn）打开和服务器的连接
method：String，请求的类型 get 或 post，
url：String，文件在服务器上的位置，
asyn：Boolean，true（异步）或 false（同步）。

Props：一般用于父组件向子组件通信，在组件之间通信使用。
State：一般用于组件内部的状态维护，更新组建内部的数据，状态，更新子组件的props等

React组件API
设置状态：setState
替换状态：replaceState（瑞普累死 四得特）
设置属性：setProps
替换属性：replaceProps
强制更新：forceUpdate（否司  阿婆得特）
获取DOM节点：findDOMNode（烦的  DOM  闹得）
判断组件挂载状态：isMounted（一丝  猫们踢得）

replaceState()方法与setState()类似，但是方法只会保留nextState中状态，
原state不在nextState中的状态都会被删除。（耐克斯特）

replaceProps()方法与setProps类似props，但它会删除原有props


es6的方法
1.includes()：返回布尔值，表示是否找到了参数字符串。（阴 可 撸子）
2.startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。（四到死  万斯）
3.endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。（按次  万斯）
4.repeat()repeat方法返回一个新字符串，表示将原字符串重复n次。

Array.of方法用于将一组值，转换为数组。（额瑞）
Array（）一个值时  比如3的话  就代表这个数组的长度为3
Array.of（） 一个值时  比如3的话  就代表这个数组的值有一个3

copyWithin(target, start = 0, end = this.length)
它接受三个参数。（考皮  围子  in）
target（必需）：从该位置开始替换数据。
start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。
end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。
这三个参数都应该是数值，如果不是，会自动转为数值。












